# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import torq_cln_plugin_pb2 as torq__cln__plugin__pb2


class TorqCLNPluginStub(object):
    """Only edit this file in the cln-plugin directory as make generate-from-proto will copy it from there

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TestConnection = channel.unary_unary(
                '/TorqCLNPlugin/TestConnection',
                request_serializer=torq__cln__plugin__pb2.EmptyMessage.SerializeToString,
                response_deserializer=torq__cln__plugin__pb2.TestConnectionResponse.FromString,
                )
        self.InterceptChannelOpen = channel.unary_stream(
                '/TorqCLNPlugin/InterceptChannelOpen',
                request_serializer=torq__cln__plugin__pb2.EmptyMessage.SerializeToString,
                response_deserializer=torq__cln__plugin__pb2.InterceptChannelOpenRequest.FromString,
                )
        self.RespondChannelOpen = channel.unary_unary(
                '/TorqCLNPlugin/RespondChannelOpen',
                request_serializer=torq__cln__plugin__pb2.InterceptChannelOpenResponse.SerializeToString,
                response_deserializer=torq__cln__plugin__pb2.EmptyMessage.FromString,
                )


class TorqCLNPluginServicer(object):
    """Only edit this file in the cln-plugin directory as make generate-from-proto will copy it from there

    """

    def TestConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InterceptChannelOpen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondChannelOpen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TorqCLNPluginServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TestConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.TestConnection,
                    request_deserializer=torq__cln__plugin__pb2.EmptyMessage.FromString,
                    response_serializer=torq__cln__plugin__pb2.TestConnectionResponse.SerializeToString,
            ),
            'InterceptChannelOpen': grpc.unary_stream_rpc_method_handler(
                    servicer.InterceptChannelOpen,
                    request_deserializer=torq__cln__plugin__pb2.EmptyMessage.FromString,
                    response_serializer=torq__cln__plugin__pb2.InterceptChannelOpenRequest.SerializeToString,
            ),
            'RespondChannelOpen': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondChannelOpen,
                    request_deserializer=torq__cln__plugin__pb2.InterceptChannelOpenResponse.FromString,
                    response_serializer=torq__cln__plugin__pb2.EmptyMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TorqCLNPlugin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TorqCLNPlugin(object):
    """Only edit this file in the cln-plugin directory as make generate-from-proto will copy it from there

    """

    @staticmethod
    def TestConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TorqCLNPlugin/TestConnection',
            torq__cln__plugin__pb2.EmptyMessage.SerializeToString,
            torq__cln__plugin__pb2.TestConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InterceptChannelOpen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TorqCLNPlugin/InterceptChannelOpen',
            torq__cln__plugin__pb2.EmptyMessage.SerializeToString,
            torq__cln__plugin__pb2.InterceptChannelOpenRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondChannelOpen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TorqCLNPlugin/RespondChannelOpen',
            torq__cln__plugin__pb2.InterceptChannelOpenResponse.SerializeToString,
            torq__cln__plugin__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
